import Time "mo:base/Time";
import Int "mo:base/Int";
import Trie "mo:base/Trie";
import Text "mo:base/Text";
import Iter "mo:base/Iter";
import List "mo:base/List";
import Buffer "mo:base/Buffer";
import ImageType "ImageType";
import Map "mo:base/HashMap";
import Principal "mo:base/Principal";
import Array "mo:base/Array";
import Float "mo:base/Float";

module EntryType {
  type ImageObject = ImageType.ImageObject;
  type NewImageObject = ImageType.NewImageObject;
  public type UserId = Principal;
  public type EntryStatus = {
    #approved;
    #rejected;
    #pending;
  };
  public type Web3Status = {
    #verfied;
    #un_verfied;
    #all;
  };
  public type EntryId = Text;

  public type Entry = {
    title : Text;
    description : Text;
    image : ?NewImageObject;
    likes : Nat;
    likedUsers : [Principal];
    views : Nat;
    viewedUsers : [Principal];
    creation_time : Int;
    user : UserId;
    userName : Text;
    category : [Text];
    seoTitle : Text;
    seoSlug : Text;
    seoDescription : Text;
    seoExcerpt : Text;
    subscription : Bool;
    isDraft : Bool;
    isPromoted : Bool;
    minters : [Principal];
    status : EntryStatus;
    pressRelease : Bool;
    // promotionLikesTarget : Nat;
    promotionICP : Nat;
    promotionHistory : List.List<Int>;
    podcastImgCation : Text;
    podcastImg : ?NewImageObject;
    caption : Text;
    tags : [Text];
    isCompanySelected : Bool;
    companyId : Text;
    isPodcast : Bool;
    podcastVideoLink : Text;
    isStatic : Bool;
  };
  public type EntryMetadata = {
    image : ?NewImageObject;
    description : Text;
    creation_time : Int;
    user : UserId;
    userName : Text;
    category : [Text];
    seoTitle : Text;
    seoSlug : Text;
    seoDescription : Text;
    seoExcerpt : Text;
    isPromoted : Bool;
    status : EntryStatus;
    pressRelease : Bool;
    podcastImgCation : Text;
    podcastImg : ?NewImageObject;
    caption : Text;
    tags : [Text];
    isCompanySelected : Bool;
    companyId : Text;
    isPodcast : Bool;
    podcastVideoLink : Text;

  };
  public type InputEntry = {
    title : Text;
    description : Text;
    image : ?NewImageObject;
    userName : Text;
    // user : UserId;
    category : [Text];
    seoTitle : Text;
    seoSlug : Text;
    seoDescription : Text;
    seoExcerpt : Text;
    subscription : Bool;
    isDraft : Bool;
    isPromoted : Bool;
    promotionICP : Nat;
    pressRelease : Bool;
    isPodcast : Bool;
    podcastVideoLink : Text;
    podcastImgCation : Text;
    podcastImg : ?NewImageObject;
    caption : Text;
    tags : [Text];
    isCompanySelected : Bool;
    companyId : Text;

    // promotionLikesTarget : Nat;
    // promotion: ;

  };
  public type ListEntryItem = {
    title : Text;
    image : ?NewImageObject;
    likes : Nat;
    views : Nat;
    creation_time : Int;
    user : UserId;
    userName : Text;
    category : [Text];
    isDraft : Bool;
    minters : [Principal];
    status : EntryStatus;
    isPromoted : Bool;
    pressRelease : Bool;
    isCompanySelected : Bool;
    companyId : Text;
    podcastImgCation : Text;
    podcastImg : ?NewImageObject;
    podcastVideoLink : Text;
    isPodcast : Bool;
    seoExcerpt : Text;
    isStatic : Bool;
  };
  public type TrendingEntryItemSidebar = {
    title : Text;
    likes : Nat;
    views : Nat;
    creation_time : Int;
    user : UserId;
    userName : Text;
    category : [Text];
    isDraft : Bool;
    status : EntryStatus;
    isPromoted : Bool;
    pressRelease : Bool;
    isCompanySelected : Bool;
    companyId : Text;
    image : ?NewImageObject;
    seoExcerpt : Text;
    isStatic : Bool;
  };
  public type ListPodcastItem = {
    title : Text;
    image : ?NewImageObject;
    likes : Nat;
    views : Nat;
    creation_time : Int;
    user : UserId;
    userName : Text;
    category : [Text];
    isDraft : Bool;
    minters : [Principal];
    status : EntryStatus;
    pressRelease : Bool;
    isCompanySelected : Bool;
    companyId : Text;
    isPodcast : Bool;
    podcastVideoLink : Text;
    podcastImg : ?NewImageObject;
    likedUsers : [Principal];
    seoExcerpt : Text;
    isStatic : Bool;
  };
  public type Web3 = {
    company : Text;
    shortDescription : Text;
    founderName : Text;
    founderDetail : Text;
    founderImage : NewImageObject;
    companyBanner : NewImageObject;
    catagory : Text;
    creation_time : Int;
    user : UserId;
    status : Web3Status;
    likes : Nat;
    companyUrl : ?Text;
    facebook : ?Text;
    instagram : ?Text;
    linkedin : ?Text;
    discord : ?Text;
    telegram : ?Text;
    twitter : ?Text;
    companyDetail : Text;
    likedUsers : [Principal];
    companyLogo : NewImageObject;
    views : Nat;
    articleCount : Int;
    podcastCount : Int;
    pressReleaseCount : Int;
    totalCount : Int;

  };
  public type Web3List = {
    company : Text;
    catagory : Text;
    creation_time : Int;
    views : Nat;
    articleCount : Int;
    podcastCount : Int;
    pressReleaseCount : Int;
    totalCount : Int;

  };
  public type Web3DashboardList = {
    company : Text;
    catagory : Text;
    companyLogo : NewImageObject;
    status : Web3Status;
    founderName : Text;
    companyUrl : ?Text;
    user : UserId;
    creation_time : Int;
    views : Nat;

  };
  public type InputWeb3 = {
    company : Text;
    shortDescription : Text;
    founderName : Text;
    founderDetail : Text;
    founderImage : NewImageObject;
    companyBanner : NewImageObject;
    catagory : Text;
    companyUrl : Text;
    facebook : Text;
    instagram : Text;
    linkedin : Text;
    discord : Text;
    telegram : Text;
    twitter : Text;
    companyDetail : Text;
    companyLogo : NewImageObject;

  };
  public type CategoryId = Text;
  public type Category = {
    name : Text;
    slug : Text;
    description : Text;
    logo : NewImageObject;
    banner : NewImageObject;
    creation_time : Int;
    user : Principal;
    parentCategoryId : ?CategoryId;
    children : ?[CategoryId];
    isChild : Bool;
    articleCount : Int;
    podcastCount : Int;
    eventsCount : Int;
    directoryCount : Int;
    pressReleaseCount : Int;
    totalCount : Int;

  };
  public type NestedCategory = {
    name : Text;
    slug : Text;
    description : Text;
    creation_time : Int;
    user : Principal;
    parentCategoryId : ?CategoryId;
    children : ?[(CategoryId, NestedCategory)];
    isChild : Bool;
    hasMore : Bool;
    articleCount : Int;
    podcastCount : Int;
    eventsCount : Int;
    directoryCount : Int;
    pressReleaseCount : Int;
    totalCount : Int;
  };
  public type InputCategory = {
    name : Text;
    slug : Text;
    description : Text;
    logo : NewImageObject;
    banner : NewImageObject;
    parentCategoryId : ?CategoryId;
  };
  public type ListCategory = {
    name : Text;
    slug : Text;
    description : Text;
    creation_time : Int;
    logo : NewImageObject;
    user : Principal;
    parentCategoryId : ?CategoryId;
    children : ?[CategoryId];
    isChild : Bool;
    articleCount : Int;
    podcastCount : Int;
    eventsCount : Int;
    directoryCount : Int;
    pressReleaseCount : Int;
    totalCount : Int;
  };
  public type EntryStorage = Map.HashMap<EntryId, Entry>;
  public type Web3Storage = Map.HashMap<Text, Web3>;
  public type Subscriber = {
    user : Principal;
    subscribed_on : Int;
  };
  public type SubKey = Principal;
  public type EventId = Text;
  public type Event = {
    title : Text;
    shortDescription : Text;
    description : Text;
    date : Int;
    endDate : Int;
    location : Text;
    country : Text;
    city : Text;
    website : Text;
    category : [Text];
    tags : [Text];
    linkdin : Text;
    facebook : Text;
    telegram : Text;
    instagram : Text;
    twitter : Text;
    organiser : Text;
    image : NewImageObject;
    creation_time : Int;
    month : Nat;
    user : UserId;
    seoTitle : Text;
    seoSlug : Text;
    seoDescription : Text;
    seoExcerpt : Text;
    freeTicket : Text;
    applyTicket : Text;
    lat : Float;
    lng : Float;
  };
  public type Events = [(EventId, Event)];
  public type InputEvent = {
    title : Text;
    shortDescription : Text;
    description : Text;
    date : Int;
    endDate : Int;
    location : Text;
    country : Text;
    city : Text;
    website : Text;
    category : [Text];
    tags : [Text];
    linkdin : Text;
    facebook : Text;
    telegram : Text;
    instagram : Text;
    twitter : Text;
    organiser : Text;
    image : NewImageObject;
    month : Nat;
    seoTitle : Text;
    seoSlug : Text;
    seoDescription : Text;
    seoExcerpt : Text;
    freeTicket : Text;
    applyTicket : Text;
    lat : Float;
    lng : Float;
  };
  public type EventStatus = {
    #all;
    #upcoming;
    #ongoing;
    #past;
  };
  public func generateNewRemoteObjectId() : EntryId {
    return Int.toText(Time.now());
  };

  public func entryIdKey(x : EntryId) : Trie.Key<EntryId> {
    { key = x; hash = Text.hash(x) };
  };

};
