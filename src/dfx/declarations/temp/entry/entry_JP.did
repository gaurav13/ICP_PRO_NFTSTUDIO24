type anon_class_24_1 = 
 service {
   addCategory: (text, text, text) -> (vec text);
   addEvent: (InputEvent, text, text) -> (Result_2);
   addView: (Key) -> (bool);
   addWeb3View: (Key) -> (bool);
   addWeb3postCount: (Key, text) -> (bool);
   add_category: (InputCategory, text, text) -> (Result_1);
   adminDeleteEntry: (Key, text, text) -> (Result_7);
   approveArticle: (text, text, Key, bool) -> (Result_8);
   approvePodcast: (text, text, Key, bool) -> (Result_8);
   child_to_category: (vec CategoryId) -> (ListCategories) query;
   deleteDraftEntry: (Key, text) -> (Result_7);
   delete_category: (CategoryId, text, text) -> (Result_6);
   delete_event: (text, text, text) -> (Result_5);
   delete_web3: (Key, text, text) -> (Result_5);
   editViews: (Key, nat, text, text) -> (bool);
   editWeb3Views: (Key, nat, text, text) -> (bool);
   getAllEntries: (text) -> (vec record {
                                   Key;
                                   Entry;
                                 }) query;
   getAllEntryIds: (bool) -> (vec Key) query;
   getApprovedWeb3List: (nat) -> (vec record {
                                        Key;
                                        Web3;
                                      }) query;
   getCategories: () -> (vec text) query;
   getEntriesByCategory: (text) -> (vec record {
                                          Key;
                                          Entry;
                                        }) query;
   getEntriesList: (text, bool, text, nat, nat) ->
    (record {
       amount: nat;
       entries: vec record {
                      Key;
                      ListEntryItem;
                    };
     }) query;
   getEntriesNew: (CategoryId, text, nat, nat) ->
    (record {
       amount: nat;
       entries: vec record {
                      Key;
                      Entry;
                    };
     }) query;
   getEntry: (Key) -> (opt Entry) query;
   getEntryMeta: (Key) -> (EntryMetadata) query;
   getEntry_admin: (Key) -> (opt Entry) query;
   getOnlyArticles: (nat, vec text) -> (vec record {
                                              Key;
                                              Entry;
                                            }) query;
   getOnlyPressRelease: (nat, vec text) -> (vec record {
                                                  Key;
                                                  Entry;
                                                }) query;
   getPaginatedEntries: (nat, nat) ->
    (record {
       amount: nat;
       entries: vec record {
                      Key;
                      Entry;
                    };
     }) query;
   getPendingWeb3List: (nat) -> (vec record {
                                       Key;
                                       Web3;
                                     }) query;
   getPodcastList: (text, bool, text, nat, nat) ->
    (record {
       amount: nat;
       entries: vec record {
                      Key;
                      ListPodcastItem;
                    };
     }) query;
   getPressEntries: (text) -> (vec record {
                                     Key;
                                     Entry;
                                   }) query;
   getPromotedEntries: (nat) -> (vec record {
                                       Key;
                                       Entry;
                                     }) query;
   getQuriedEntries: (opt CategoryId, text, text, nat, nat) ->
    (record {
       amount: nat;
       entries: vec record {
                      Key;
                      Entry;
                    };
     }) query;
   getReviewEntries: (text, text, EntryStatus__1, text, nat, nat) ->
    (record {
       amount: nat;
       entries: vec record {
                      Key;
                      ListEntryItem;
                    };
     });
   getReviewPodcast: (text, text, EntryStatus__1, text, nat, nat) ->
    (record {
       amount: nat;
       entries: vec record {
                      Key;
                      ListPodcastItem;
                    };
     });
   getUserEntries: (UserId__1) -> (vec record {
                                         Key;
                                         Entry;
                                       }) query;
   getUserEntriesList: (text, bool, text, nat, nat) ->
    (record {
       amount: nat;
       entries: vec record {
                      Key;
                      ListEntryItem;
                    };
     }) query;
   getUserPodcast: (UserId__1) -> (vec record {
                                         Key;
                                         Entry;
                                       }) query;
   getUserWeb3List: (text, text, nat, nat) ->
    (record {
       amount: nat;
       web3List: vec record {
                       Key;
                       Web3;
                     };
     }) query;
   getWeb3: (Key) -> (opt Web3) query;
   getWeb3DirectoriesDashboard: (text, Web3Status__1, text, text, nat,
    nat) ->
    (record {
       amount: nat;
       web3List: vec record {
                       Key;
                       Web3DashboardList;
                     };
     });
   getWeb3List: (text, text, nat, nat) ->
    (record {
       amount: nat;
       web3List: vec record {
                       Key;
                       Web3List;
                     };
     }) query;
   getWeb3ListOfAllUsers: (text, text, nat, nat) ->
    (record {
       amount: nat;
       web3List: vec record {
                       Key;
                       Web3;
                     };
     }) query;
   getWeb3_for_admin: (Key, text) -> (opt Web3);
   get_categories: (text, nat, nat, bool) ->
    (record {
       amount: nat;
       entries: ListCategories;
     }) query;
   get_categories_by_name: (vec text) ->
    (vec record {
           CategoryId;
           Category;
         }) query;
   get_category: (text) -> (opt Category) query;
   get_event: (text) -> (opt Event__1) query;
   get_events: (text, nat, nat, opt nat, opt text, opt text) ->
    (record {
       amount: nat;
       entries: Events;
     }) query;
   get_like_reward: () -> (nat) query;
   get_list_categories: (text, nat, nat, bool) ->
    (record {
       amount: nat;
       entries: ListCategories;
     }) query;
   get_list_category: (text) -> (opt ListCategory) query;
   get_reward: () -> (RewardConfig) query;
   get_upcoming_events: (text, nat, nat, EventStatus, opt nat, opt text,
    opt text) -> (record {
                    amount: nat;
                    entries: Events;
                  }) query;
   insertEntry: (InputEntry, text, bool, text, text) -> (Result_4);
   insertWeb3: (InputWeb3, text, text, text, bool) -> (Result_3);
   isMinted: (Key) -> (bool);
   likeEntry: (Key, text, text) -> (Result);
   likeWeb3: (Key, text, text) -> (Result);
   makeStatic: (Key) -> (bool);
   mintEntry: (Key, text) -> (Result);
   trendingEntryItemSidebar: (nat) ->
    (vec record {
           Key;
           TrendingEntryItemSidebar;
         }) query;
   trendingPressReleaseItemSidebar: (nat) ->
    (vec record {
           Key;
           TrendingEntryItemSidebar;
         }) query;
   updateEvent: (InputEvent, text, text, text) -> (Result_2);
   update_category: (InputCategory, CategoryId, text, text) -> (Result_1);
   update_count_category: (CategoryId, text) -> (Result);
   update_like_reward: (text, LikeReward) -> (LikeReward);
   update_reward: (text, RewardConfig) -> (RewardConfig);
   verifyWeb3: (Key, text, text, bool) -> (Result);
 };
type Web3Status__1 = 
 variant {
   all;
   un_verfied;
   verfied;
 };
type Web3Status = 
 variant {
   all;
   un_verfied;
   verfied;
 };
type Web3List = 
 record {
   articleCount: int;
   catagory: text;
   company: text;
   creation_time: int;
   podcastCount: int;
   pressReleaseCount: int;
   totalCount: int;
   views: nat;
 };
type Web3Id = text;
type Web3DashboardList = 
 record {
   catagory: text;
   company: text;
   companyLogo: NewImageObject;
   companyUrl: opt text;
   creation_time: int;
   founderName: text;
   status: Web3Status;
   user: UserId;
   views: nat;
 };
type Web3 = 
 record {
   articleCount: int;
   catagory: text;
   company: text;
   companyBanner: NewImageObject;
   companyDetail: text;
   companyLogo: NewImageObject;
   companyUrl: opt text;
   creation_time: int;
   discord: opt text;
   facebook: opt text;
   founderDetail: text;
   founderImage: NewImageObject;
   founderName: text;
   instagram: opt text;
   likedUsers: vec principal;
   likes: nat;
   linkedin: opt text;
   podcastCount: int;
   pressReleaseCount: int;
   shortDescription: text;
   status: Web3Status;
   telegram: opt text;
   totalCount: int;
   twitter: opt text;
   user: UserId;
   views: nat;
 };
type UserId__1 = principal;
type UserId = principal;
type TrendingEntryItemSidebar = 
 record {
   category: vec text;
   companyId: text;
   creation_time: int;
   image: opt NewImageObject;
   isCompanySelected: bool;
   isDraft: bool;
   isPromoted: bool;
   isStatic: bool;
   likes: nat;
   pressRelease: bool;
   seoExcerpt: text;
   status: EntryStatus;
   title: text;
   user: UserId;
   userName: text;
   views: nat;
 };
type RewardConfig = 
 record {
   admin: nat;
   master: nat;
   platform: nat;
 };
type Result_8 = 
 variant {
   err: text;
   ok: record {
         text;
         Entry;
       };
 };
type Result_7 = 
 variant {
   err: text;
   ok: record {
         text;
         opt Entry;
       };
 };
type Result_6 = 
 variant {
   err: text;
   ok: record {
         text;
         opt Category;
       };
 };
type Result_5 = 
 variant {
   err: record {
          text;
          bool;
        };
   ok: record {
         text;
         bool;
       };
 };
type Result_4 = 
 variant {
   err: text;
   ok: record {
         text;
         EntryId;
       };
 };
type Result_3 = 
 variant {
   err: text;
   ok: record {
         text;
         Web3Id;
       };
 };
type Result_2 = 
 variant {
   err: text;
   ok: record {
         text;
         EventId;
       };
 };
type Result_1 = 
 variant {
   err: text;
   ok: record {
         text;
         Category;
       };
 };
type Result = 
 variant {
   err: text;
   ok: record {
         text;
         bool;
       };
 };
type NewImageObject = text;
type ListPodcastItem = 
 record {
   category: vec text;
   companyId: text;
   creation_time: int;
   image: opt NewImageObject;
   isCompanySelected: bool;
   isDraft: bool;
   isPodcast: bool;
   isStatic: bool;
   likedUsers: vec principal;
   likes: nat;
   minters: vec principal;
   podcastImg: opt NewImageObject;
   podcastVideoLink: text;
   pressRelease: bool;
   seoExcerpt: text;
   status: EntryStatus;
   title: text;
   user: UserId;
   userName: text;
   views: nat;
 };
type ListEntryItem = 
 record {
   category: vec text;
   companyId: text;
   creation_time: int;
   image: opt NewImageObject;
   isCompanySelected: bool;
   isDraft: bool;
   isPodcast: bool;
   isPromoted: bool;
   isStatic: bool;
   likes: nat;
   minters: vec principal;
   podcastImg: opt NewImageObject;
   podcastImgCation: text;
   podcastVideoLink: text;
   pressRelease: bool;
   seoExcerpt: text;
   status: EntryStatus;
   title: text;
   user: UserId;
   userName: text;
   views: nat;
 };
type ListCategory = 
 record {
   articleCount: int;
   children: opt vec CategoryId__1;
   creation_time: int;
   description: text;
   directoryCount: int;
   eventsCount: int;
   isChild: bool;
   logo: NewImageObject;
   name: text;
   parentCategoryId: opt CategoryId__1;
   podcastCount: int;
   pressReleaseCount: int;
   slug: text;
   totalCount: int;
   user: principal;
 };
type ListCategories = 
 vec record {
       CategoryId;
       ListCategory;
     };
type List = 
 opt record {
       int;
       List;
     };
type LikeReward = nat;
type Key = text;
type InputWeb3 = 
 record {
   catagory: text;
   company: text;
   companyBanner: NewImageObject;
   companyDetail: text;
   companyLogo: NewImageObject;
   companyUrl: text;
   discord: text;
   facebook: text;
   founderDetail: text;
   founderImage: NewImageObject;
   founderName: text;
   instagram: text;
   linkedin: text;
   shortDescription: text;
   telegram: text;
   twitter: text;
 };
type InputEvent = 
 record {
   applyTicket: text;
   category: vec text;
   city: text;
   country: text;
   date: int;
   description: text;
   endDate: int;
   facebook: text;
   freeTicket: text;
   image: NewImageObject;
   instagram: text;
   lat: float64;
   linkdin: text;
   lng: float64;
   location: text;
   month: nat;
   organiser: text;
   seoDescription: text;
   seoExcerpt: text;
   seoSlug: text;
   seoTitle: text;
   shortDescription: text;
   tags: vec text;
   telegram: text;
   title: text;
   twitter: text;
   website: text;
 };
type InputEntry = 
 record {
   caption: text;
   category: vec text;
   companyId: text;
   description: text;
   image: opt NewImageObject;
   isCompanySelected: bool;
   isDraft: bool;
   isPodcast: bool;
   isPromoted: bool;
   podcastImg: opt NewImageObject;
   podcastImgCation: text;
   podcastVideoLink: text;
   pressRelease: bool;
   promotionICP: nat;
   seoDescription: text;
   seoExcerpt: text;
   seoSlug: text;
   seoTitle: text;
   subscription: bool;
   tags: vec text;
   title: text;
   userName: text;
 };
type InputCategory = 
 record {
   banner: NewImageObject;
   description: text;
   logo: NewImageObject;
   name: text;
   parentCategoryId: opt CategoryId__1;
   slug: text;
 };
type Events = 
 vec record {
       EventId__1;
       Event;
     };
type Event__1 = 
 record {
   applyTicket: text;
   category: vec text;
   city: text;
   country: text;
   creation_time: int;
   date: int;
   description: text;
   endDate: int;
   facebook: text;
   freeTicket: text;
   image: NewImageObject;
   instagram: text;
   lat: float64;
   linkdin: text;
   lng: float64;
   location: text;
   month: nat;
   organiser: text;
   seoDescription: text;
   seoExcerpt: text;
   seoSlug: text;
   seoTitle: text;
   shortDescription: text;
   tags: vec text;
   telegram: text;
   title: text;
   twitter: text;
   user: UserId;
   website: text;
 };
type EventStatus = 
 variant {
   all;
   ongoing;
   past;
   upcoming;
 };
type EventId__1 = text;
type EventId = text;
type Event = 
 record {
   applyTicket: text;
   category: vec text;
   city: text;
   country: text;
   creation_time: int;
   date: int;
   description: text;
   endDate: int;
   facebook: text;
   freeTicket: text;
   image: NewImageObject;
   instagram: text;
   lat: float64;
   linkdin: text;
   lng: float64;
   location: text;
   month: nat;
   organiser: text;
   seoDescription: text;
   seoExcerpt: text;
   seoSlug: text;
   seoTitle: text;
   shortDescription: text;
   tags: vec text;
   telegram: text;
   title: text;
   twitter: text;
   user: UserId;
   website: text;
 };
type EntryStatus__1 = 
 variant {
   approved;
   pending;
   rejected;
 };
type EntryStatus = 
 variant {
   approved;
   pending;
   rejected;
 };
type EntryMetadata = 
 record {
   caption: text;
   category: vec text;
   companyId: text;
   creation_time: int;
   description: text;
   image: opt NewImageObject;
   isCompanySelected: bool;
   isPodcast: bool;
   isPromoted: bool;
   podcastImg: opt NewImageObject;
   podcastImgCation: text;
   podcastVideoLink: text;
   pressRelease: bool;
   seoDescription: text;
   seoExcerpt: text;
   seoSlug: text;
   seoTitle: text;
   status: EntryStatus;
   tags: vec text;
   user: UserId;
   userName: text;
 };
type EntryId = text;
type Entry = 
 record {
   caption: text;
   category: vec text;
   companyId: text;
   creation_time: int;
   description: text;
   image: opt NewImageObject;
   isCompanySelected: bool;
   isDraft: bool;
   isPodcast: bool;
   isPromoted: bool;
   isStatic: bool;
   likedUsers: vec principal;
   likes: nat;
   minters: vec principal;
   podcastImg: opt NewImageObject;
   podcastImgCation: text;
   podcastVideoLink: text;
   pressRelease: bool;
   promotionHistory: List;
   promotionICP: nat;
   seoDescription: text;
   seoExcerpt: text;
   seoSlug: text;
   seoTitle: text;
   status: EntryStatus;
   subscription: bool;
   tags: vec text;
   title: text;
   user: UserId;
   userName: text;
   viewedUsers: vec principal;
   views: nat;
 };
type CategoryId__1 = text;
type CategoryId = text;
type Category = 
 record {
   articleCount: int;
   banner: NewImageObject;
   children: opt vec CategoryId__1;
   creation_time: int;
   description: text;
   directoryCount: int;
   eventsCount: int;
   isChild: bool;
   logo: NewImageObject;
   name: text;
   parentCategoryId: opt CategoryId__1;
   podcastCount: int;
   pressReleaseCount: int;
   slug: text;
   totalCount: int;
   user: principal;
 };
service : () -> anon_class_24_1
